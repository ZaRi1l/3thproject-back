# 워크플로우의 이름을 지정합니다. GitHub 저장소의 "Actions" 탭에 이 이름이 표시됩니다.
name: Backend CI/CD Pipeline

# ===================================================================
#  1. 워크플로우 실행 조건 (Trigger)
# ===================================================================
on:
  # main 브랜치에 직접 push 할 때
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

  # main 브랜치로 Pull Request가 merge 될 때
  pull_request:
    types: [ closed ]
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

# ===================================================================
#  2. 실행될 작업 (Jobs)
# ===================================================================
jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      # -------------------------------------------------------------------
      #  단계 1: 소스 코드 및 환경 준비
      # -------------------------------------------------------------------
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # -------------------------------------------------------------------
      #  단계 2: Docker Hub 로그인
      # -------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------------------------------------------
      #  단계 3: 이미지 빌드 및 푸시, 그리고 DIGEST 캡처
      # -------------------------------------------------------------------
      - name: Build and Push Docker Image
        id: build-and-push # 이 단계에 ID를 부여합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-back:latest
          no-cache: true

      # -------------------------------------------------------------------
      #  단계 4: EC2 서버에 배포 (DIGEST 지정 방식)
      # -------------------------------------------------------------------
      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST_IP }}
          username: ${{ secrets.AWS_HOST_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/app

            # 1. 기존 .env 파일이 있다면 백업하거나 초기화합니다.
            > .env
            
            # 2. 필요한 환경 변수들을 .env 파일에 새로 씁니다.
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            echo "DB_USERNAME_PROD=${{ secrets.DB_USERNAME_PROD }}" >> .env
            echo "DB_PASSWORD_PROD=${{ secrets.DB_PASSWORD_PROD }}" >> .env

            # [백엔드 워크플로우인 경우]
            # 3. [핵심] 배포할 이미지 정보를 .env 파일에 직접 추가합니다.
            # docker-compose.yml이 이 변수를 읽어 정확한 이미지를 사용하게 됩니다.
            echo "IMAGE_TAG_BACK=${{ steps.build-and-push.outputs.digest }}" >> .env
            echo "Deploying Backend with Image Digest from .env file..."
            
            # 4. Docker Hub 로그인
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

            # 5. docker-compose.yml에 명시된 모든 이미지를 최신 버전으로 pull
            # .env 파일 덕분에 이제 정확한 다이제스트로 이미지를 가져옵니다.
            docker compose pull

            # 6. 컨테이너를 강제로 재생성하여 실행
            docker compose up -d --force-recreate
            
            # 7. 사용하지 않는 구버전 이미지들 삭제
            docker image prune -af

            echo "Deployment completed! Checking running containers..."
            
            # 8. 최종 확인
            docker ps
# 워크플로우의 이름을 지정합니다. GitHub 저장소의 "Actions" 탭에 이 이름이 표시됩니다.
name: Backend CI/CD Pipeline

# ===================================================================
#  1. 워크플로우 실행 조건 (Trigger)
# ===================================================================
on:
  # main 브랜치에 직접 push 할 때
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

  # main 브랜치로 Pull Request가 merge 될 때
  pull_request:
    types: [ closed ]
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

# ===================================================================
#  2. 실행될 작업 (Jobs)
# ===================================================================
jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      # -------------------------------------------------------------------
      #  단계 1: 소스 코드 및 환경 준비
      # -------------------------------------------------------------------
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # -------------------------------------------------------------------
      #  단계 2: Docker Hub 로그인
      # -------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------------------------------------------
      #  단계 3: 이미지 빌드 및 푸시, 그리고 DIGEST 캡처
      # -------------------------------------------------------------------
      - name: Build and Push Docker Image
        id: build-and-push # 이 단계에 ID를 부여합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-back:latest
          no-cache: true

      # -------------------------------------------------------------------
      #  단계 4: EC2 서버에 배포 (DIGEST 지정 방식)
      # -------------------------------------------------------------------
      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST_IP }}
          username: ${{ secrets.AWS_HOST_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/app

            # 1. 환경 변수 설정 (DB 정보 등)
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "DB_USERNAME_PROD=${{ secrets.DB_USERNAME_PROD }}" >> .env
            echo "DB_PASSWORD_PROD=${{ secrets.DB_PASSWORD_PROD }}" >> .env
            
            # 2. CI에서 빌드한 백엔드 이미지의 정확한 다이제스트를 환경 변수로 지정
            # export IMAGE_TAG_BACK="@${{ steps.build-and-push.outputs.digest }}"
            # echo "Deploying Backend with Image Digest: ${IMAGE_TAG_BACK}"

            IMAGE_TAG_BACK="@${{ steps.build-and-push.outputs.digest }}" \
            docker compose pull backend # 특정 서비스만 pull 할 수 있습니다.

            IMAGE_TAG_BACK="@${{ steps.build-and-push.outputs.digest }}" \
            docker compose up -d --force-recreate 

            # 7. 사용하지 않는 구버전 이미지들 삭제 (디스크 용량 확보)
            docker image prune -af

            echo "Backend deployment completed successfully!"

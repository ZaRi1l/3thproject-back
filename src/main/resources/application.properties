spring.application.name=3thproject_web



# ===================================================================
# DATABASE CONFIGURATION (Multi-Datasource)
# ===================================================================

# --- PostgreSQL (기본 DB - 읽기/쓰기용) ---
# 'postgresql' 이라는 이름으로 설정을 그룹화합니다.
spring.datasource.postgresql.url=jdbc:postgresql://project-3th-db.cbgmiumso2dw.ap-northeast-2.rds.amazonaws.com:5432/project_3th_db
spring.datasource.postgresql.username=postgres
spring.datasource.postgresql.password=qwer1234
spring.datasource.postgresql.driver-class-name=org.postgresql.Driver

# --- Oracle (?? ??? ??? DB) ---
# ????? [1??] ??? DB ??? ???? ????. ??"??"
# ??? ??? ? ???? false? ?????.
# ??? ?? ?? ? ? ?? true? ??? ??? ??? ??????.
oracle.db.enabled=false



# --- Oracle (읽기 전용 DB) ---
# 'oracle' 이라는 이름으로 설정을 그룹화합니다.
spring.datasource.oracle.url=jdbc:oracle:thin:@210.94.241.9:1521:xe
spring.datasource.oracle.username=C##sahmyook
spring.datasource.oracle.password=sahmyook1
spring.datasource.oracle.driver-class-name=oracle.jdbc.driver.OracleDriver
# HikariCP 설정을 통해 이 데이터소스를 읽기 전용으로 지정 (매우 중요)
spring.datasource.oracle.hikari.read-only=true


# ===================================================================
# JPA & HIBERNATE (전역 설정)
# ===================================================================
# JPA 관련 공통 설정입니다. 각 DB별 세부 설정은 Java Configuration 클래스에서 제어합니다.

# DDL 자동 생성 옵션: "none"으로 변경하여 안전 확보 (매우 중요)
# 공유 DB인 Oracle에 update 옵션이 적용되는 것을 막기 위함입니다.
# PostgreSQL의 스키마 생성/변경은 초기 실행 시에만 create나 update로 했다가, 개발 중에는 validate나 none으로 바꿔서 관리하는 것을 권장합니다.
spring.jpa.hibernate.ddl-auto=update

# 실행되는 SQL 쿼리를 콘솔에 보여주기
spring.jpa.show-sql=true

# 보여주는 SQL 쿼리를 예쁘게 포맷팅하기
spring.jpa.properties.hibernate.format_sql=true

# 데이터베이스별 Dialect(방언)는 이제 Java Configuration에서 개별적으로 지정할 것이므로,
# 전역 설정에서는 삭제하거나 주석 처리해도 됩니다.
# spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect






# ===================================================================
# GraphQL
# ===================================================================

# GraphQL 엔드포인트 경로 설정 (기본값은 /graphql)
spring.graphql.path=/graphql

# GraphiQL UI 활성화 (개발 시 매우 유용)
spring.graphql.graphiql.enabled=true

# ===================================================================
# JWT (JSON Web Token)
# ===================================================================
# JWT ??? ??? ?? ?. ??? ???? ? ???.
jwt.secret=V293ISB0aGlzIGlzIGEgdmVyeSB2ZXJ5IHZlcnkgbG9uZyBzZWNyZXQga2V5IGZvciBqd3QgZ3JhY2VmdWxseSBoYW5kbGluZyB0aGUgZGF0YS4=

# ??? ?? ?? ?? (??)
initial-admin.id=admin
initial-admin.password=admin_password123!







# ===================================================================
# PACS 이미지 스토리지(네트워크 드라이브) 접속 정보 
# ===================================================================
# smb://{서버IP}/{공유폴더이름}/ 형식으로 정확하게 입력합니다.
pacs.storage.url=smb://210.94.241.9/STS/

# 윈도우에서 로그인에 성공한 아이디
pacs.storage.username=SYU

# 윈도우에서 로그인에 성공한 비밀번호
pacs.storage.password=1